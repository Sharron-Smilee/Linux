LINUX Commands
--------------
pwd -> gives the "present working directory" path
date -> gives date and time
clear -> clears the screen
exit -> exits or quits the session
--------------------------------------------------------
echo -> gives or repeats or echoes the same content
echo SS
SS (output)
--------------------------------------------------------
ls -> shows the number of of files present in the directory
ls -l -> shows the number and gives the list of files present in the directory
ls -la -> shows the number and gives the list of files along with hidden files present in the directory
ls -lr -> gives the list in reverse order
ls -lt -> gives the latest files list in top
ls -ltr -> gives the latest files at the bottom (top reverse)
--------------------------------------------------------
touch sample.txt -> creates "sample.txt" document
cat > sample.txt -> inserting or typing the content into the document. 
Type text - Enter - Click ctrl+d to save
cat >> sample.txt -> appending the content into the document without deleting the previous content 
--------------------------------------------------------
cp <source.txt> <destination_Folder> -> COPIES file from source to destination folder
--------------------------------------------------------
mv <source.txt> <destination_Folder> -> CUTS or MOVES file from source to destination folder
--------------------------------------------------------
mkdir <folder_name> -> for creating or making directory / folder 
rmdir <folder_name> -> for deleting the empty directory / folder
rm sample.txt -> REMOVES or DELETES file
rm -rf <directory_path> -> FORCEfully REMOVES or DELETES directory along with the files in it 
--------------------------------------------------------
Downloading & viewing a file from a website:
wget <URL> -> to download a file
curl <URL> -> to view the file 
curl -L -o "<URL>" -> to download the file from a website using GIT Bash
--------------------------------------------------------
grep -> search a word in the document
grep <word_to_find> <filename>
--------------------------------------------------------
using grep command along with pipe "|" symbol
pipe "|" symbol is used to take the output of one command as a input to the next command

ex: to search a word from a text document
cat sample.txt | grep <word_to_find>
--------------------------------------------------------
CUT command: used to cut the word and give it as a output
ex: to give the filename from a URL

echo <URL> | cut -d "/" -f1 
1. echo gives the URL as output
2. pipe "|" is used to take the output as a input to the next command i.e., to the CUT command
3. cut is used to pick or select only the desired text
4. -d -> delimiter
5. "/" -> here slash is used as a delimiter in the URL
6. f1 -> fragment 1 - means 1st word before the 1st delimiter. words between the delimiters are counted as 1,2,3 etc..

ex: echo https://github.com/Sharron-Smilee/Linux/blob/main/Linux_Commands.txt | cut -d "/" -f1
output: https:

ex: echo https://github.com/Sharron-Smilee/Linux/blob/main/Linux_Commands.txt | cut -d "/" -f1-3
output: https://github.com

ex: echo https://github.com/Sharron-Smilee/Linux/blob/main/Linux_Commands.txt | cut -d "/" -f4
output: Sharron-Smilee

ex: echo https://github.com/Sharron-Smilee/Linux/blob/main/Linux_Commands.txt | cut -d "/" -f8
output: Linux_Commands.txt
--------------------------------------------------------
AWK Command: this AWK command is also used to find the word from a file just like CUT command

ex: echo https://github.com/Sharron-Smilee/Linux/blob/main/Linux_Commands.txt | awk -F "/" '{print $1F}'
output: https:

ex: echo https://github.com/Sharron-Smilee/Linux/blob/main/Linux_Commands.txt | awk -F "/" '{print $4F}'
output: Sharron-Smilee

ex: echo https://github.com/Sharron-Smilee/Linux/blob/main/Linux_Commands.txt | awk -F "/" '{print $4F,$NF}'
output: Sharron-Smilee Linux_Commands.txt

Let's consider a file as "Sample_Users.txt" 
SS:user1:asas/qwq/df
SU:user2:jgjhj/hfsddh/etyye:shdjhfghjg
VJS:user3:jdgfjsfy/djfggfdhj:jgdsjhfh

awk -F "<delimiter>" {print $1F} <filename>
-F -> fragment
$1F -> fragment number

ex: to find the name of the user:
awk -F ":" {print $1F} Sample_Users.txt
output:
SS
SU
VJS

ex: to find the name & number of the user:
awk -F ":" {print $1F,$2F} Sample_Users.txt
output:
SS user1
SU user2
VJS user3

ex: to find the number & name of the user:
awk -F ":" {print $1F,$2F} Sample_Users.txt
output:
user1 SS
user2 SU
user3 VJS
--------------------------------------------------------
HEAD & TAIL commands:

Head - to give the top 10 list
Tail - to give the bottom 10 list

cat <filename> | head

Let's consider a file as "Sample_Users.txt" 
SS:user1:asas/qwq/df
SU:user2:jgjhj/hfsddh/etyye:shdjhfghjg
VJS:user3:jdgfjsfy/djfggfdhj:jgdsjhfh

ex: to give top 10
cat Sample_Users.txt | head

output: since the file contains only 3 lines, it gives only that otherwise it gives to 10 specifically
SS:user1:asas/qwq/df
SU:user2:jgjhj/hfsddh/etyye:shdjhfghjg
VJS:user3:jdgfjsfy/djfggfdhj:jgdsjhfh

ex: to give top 1
cat Sample_Users.txt | head -n1
output: SS:user1:asas/qwq/df

ex: to give bottom 1
cat Sample_Users.txt | tail -n1
output: VJS:user3:jdgfjsfy/djfggfdhj:jgdsjhfh

ex: to show any running logs from a session
tail -f <log-file>
--------------------------------------------------------
FIND Command:
find <where_to_search> -name <filename>
* is used when we don't remember what comes after that
ex: fil* or *name etc...

ex 1: to search a file in current directory, we use dot(.) else we use slash (/)
sharronsmilee@Maya CLANGARM64 ~/Desktop/DevSecOps
$ find . -name "Lin*"

Output:
./01082025/Linux_Commands.txt
./Linux_Commands.txt

ex 2:
sharronsmilee@Maya CLANGARM64 ~/Desktop/DevSecOps
$ find . -name "Sam"

output:
./Sample_Users.txt
--------------------------------------------------------
